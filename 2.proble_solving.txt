- Problem Solving Agent
    - Goal Formulation : based on the current situation and agent 
    performance measures, is the first  step in problem solving.
    - Problem Formulation : the process of deciding what actions
    and states to consider given a goal 
    - Search : process of looking for a sequence of action that 
    reaches the goal.
    - Search Algorithm : takes a problem and returns a solution as 
    an action sequence
    - Execution : The process of carrying out the action recommended
    - Open loop :  a system where an agent that carries its task with closed eyes since
    it knows what exactly the consequence is.

- Well Defined Problems and Solutions
    - Problem : defined by five components 
        (Initial state, Actions, Transition Model, Goal Test, Path Cost)
        - Initial State : a state where the agent starts
        - Action : description of all possible actions available to agent
            - Given 
                State = S
                Action(S) returns the set of actions that can be executed in s
            - Transition Model : description of what each action does
                - Result(S, A) : returns the state that is resulted from doing A in S
                - Successor : is any state reachable from a given state in single action
                - State Space : defined by initial state, actions, and transitional model
            - Graph : formed by the state Space
                - Nodes are states
                - Links are actions
            - Path : sequence of states connected by sequence of actions
        - Goal test : determines whether the given state is a goal state or not
        - Path Cost : function that assigns a numeric cost to each path
            - Step Cost : the cost of taking action A on state S
    - Solution : action sequence that leads to goal state
    - Optimal Solution : is a solution with lowest path cost among all Solutions

- Formulating Problem // TO DO : READ FROM BOOK
    - Abstraction : // TO DO : READ FROM BOOK

- Search for Solution  
    - Search tree : Formed by the possible action sequences from initial state
        - Root : is the initial state
        - Branches : are actions
        - Node : are states in the state space of a problem
        - Parent Node : after expanding its child node a node become parent
        - Child Node : created by applying an an action on the parent Node
        - Leaf Node : A node without a child
        - Frontier / Open List : The seat of all nodes that are available for expansion
        - Search Strategy : a way of choosing which node to expand next in a search algorithm  
        - Repeated State : generated by a loopy path
    - Infrastructure of search algorithm
        - Search algorithm requires data structure to keep track of the search tree 
        that is being considered.
        - For each node (N) we have a structure that contains four components
            - N.State : the state in the state space
            - N.Parent : the node in search tree that generated this node
            - N.Action : the action that was applied to the parent to generate the node
            - N.PathCost : the cost of the path from the initial state to N 
        - Given parent node computing the child node 
            function childNode(problem, parent, action): Node {
                let N: Node;
                N.State = problem.Result(parent.State, action);
                N.Parent = parent;
                N.Action = action;
                N.PathCost = parent.PathCost + problem.StepCost(parent.State, action);
                return N;
            }
        - Frontier: needs to be stored in such a way that search algorithm can easily choose
        the next node to expand according to its preferred Strategy. Queue is best for that
            - Operation on Queue
                - EMPTY(Queue) : returns true if no more elements 
                - POP(Queue) : removes the first element of the Queue and returns it
                - INSERT(element, Queue) : insert element and returns the resulting Queue
            - Common variant of Queue
                - FIFO Queue : POP the first element
                - LIFO Queue : POP the last element
                - Priority Queue : POP element with highest Priority
            - The above can be implemented in a hash table
                - Good implementation, insertion and lookup is required to avoid repeated states
                - This can be achieved by enforcing canonical form
                    - i.e. logical equivalent states should be mapped to the same data structure
    - Measure of problem solving performance
        - Completeness : does the algorthm guranteed to find a solution when there is one?
        - Optimality : Does the strategy find optimal solution
        - Time Complexity : How much time does it takes?
        - Space complexity : How much memory does it take to perform the search?
        
        - For Time and Space complexity
            - typical measure is the size of the state space Graph
                |V| + |E|
                where V = nodes
                      E = edges
                - but this appropriate where the data structure is explicit
            - In AI the graph is often implicit (defined by initial state, action and transition model) 
            and frequently infinite. 
                - For this reason complexity is expressed in 
                    - Branching faction (B) : maximum number of Successor of any node
                    - Depth (D) : the shallowest goal node 
                    - M : maximum length of any path in the state space)
                - Time is measured in terms of number of nodes generated during search
                - Space is measured in terms of maximum number nodes stored in memory
- Uninformed Search
    - Breadth-First Search : is a simple strategy in which the root node is expanded first
    then all successors of the root node are expanded next then their Successor.
            - All noes are expanded before the next level are expanded
            - has shallowest path to every node on the Frontier
        - Algorithm
            function breadthFirstSearch(problem): Solution | Failure {
                let iNode: Node; // a node with State = problem.InitialState, & PathCost = 0
                if ( problem.GoalTest(node.State) ) {
                    return Solution(node);
                }

                let frontier: Node[] =  [iNode]; // A FIFO queue with node as the only element
                let explored: Node[] = []; // Empty set 
                while (1) {
                    if ( frontier.length === 0 ) {
                        return Failure;
                    }

                    let node: Node = frontier.pop(0);
                    explored.push(node.State);
                    foreach ( action of problem.Actions(node.State) ) {
                        let childNode: Node = childNode(problem, node, action);
                        if ( explored.indexOf(childNode.State) === -1  && frontier.indexOf(childNode.State) === -1) {
                            if ( problem.GoalTest(childNode.State) ) {
                                return Solution(childNode);
                            }
                            frontier.push(childNode);
                        }
                    }
                }
            }
        - Node generated in each level
            - b.pow(1) nodes at the first level
            - b.pow(2) at second level
            - b.pow(3) at the third level
            - Lets suppose the solution is at depth d
                b + b.pow(2) + b.pow(3) + ... + b.pow(d) = O(b.pow(d))

        - Evaluation of algorithm
            - Optimal : Yes if the path cost is not decreasing
            - Space : O(b.pow(d-1)) in explored and O(b.pow(d)) in frontier
            - Time : O(b.pow(d)) i.e exponential in d
            - Complete : Yes

    - Uniform-Cost Search : expands the node nd with the lowest path cost g(n)
        -  this is done by making frontier priority queue
            function breadthFirstSearch(problem): Solution | Failure {
                let iNode: Node; // a node with State = problem.InitialState, & PathCost = 0
                if ( problem.GoalTest(node.State) ) {
                    return Solution(node);
                }

                let frontier: Node[] =  [iNode]; // A priority queue order by priority
                let explored: Node[] = []; // Empty set 
                while (1) {
                    if ( frontier.length === 0 ) {
                        return Failure;
                    }

                    let node: Node = frontier.pop(0); // pop node with lowest cost
                    explored.push(node.State);
                    foreach ( action of problem.Actions(node.State) ) {
                        let childNode: Node = childNode(problem, node, action);
                        if ( explored.indexOf(childNode.State) === -1  &&
                             frontier.indexOf(childNode.State) === -1) {
                            if ( problem.GoalTest(childNode.State) ) {
                                return Solution(childNode);
                            }
                            frontier.push(childNode);
                            frontier.sort(); // by priority
                        } else if ( frontier.indexOf(childNode.State) !== -1 ) {
                            let  index = frontier.indexOf(childNode.State);
                            if ( frontier[index].PathCost > chidNode.PathCost ) {
                                frontier.splice(index, childNode.PathCost, 1); // Replace it with childNode
                            }
                        }
                    }
                }
            }
        - Uniform-cost search does not care about the number of steps a path has only the cost. 
            - So time and spaces are not characterized by b and d
            - Let C* be the cost ot the optimal solution
            - Assume that every action costs at least (c)
            - then the worst case complexity is O(b.pow(1+[C*/c])) > O(b.pow(d)) 

    - Depth-First Search : Always explores the deepest node in the current frontier of the search tree.
        - the search proceeds immediately to deepest level
        - LIFO queue
        - Evaluation
            - Complete : No fails in infinite-depth spaces, spaces with loops 
                - Complete in finite space
            - Time : O(b.pow(m)) : Terrible if m is much larger than d
                - where m is maximum depth of any node
            - Space : O (bm) i.e linear space
            Optimal : No
    - Depth-Limit Search : is a depth-first search with constant depth limit (l) 
    - Iterative deepening depth-first : used together with depth first tree search
        - finds best depth limit (does this gradually increasing the depth 0, to 1, then 2 ...) until goal is found
        - combines both the benefit of depth first and breadth first
            - Like depth first memory is O(bd)
            - Like breadth first its complete when teh branching factor is finite and optimal

    - Bidirectional Search
- Informed (Heuristic) Search Strategy : the expansion of the node is selected based on the evaluation function.
    - Heuristic Function : denoted by h(n)
        - estimates the cheapest path from the state at node n to a goal state.
        - h(n) depends only on the state      
    - Greedy Best-First Search : expands the node that is closest to the goal on the grounds
    that is likely to lead to a solution quickly.
        - complete : No can get stack in loops
            complete in finite state with repeated-state checking
        - Time : O(b.pow(m)) : good heuristic can give good improvement
        - Space O(b.pow(m)) : keeps all nodes in memory
        - Optimal : No

    - A* Search Search : Avoid expanding paths that are already expensive
        - Evaluation function is f(n) = g(n) + h(n)
            - Where g(n) = cost so far to reach n 
                    h(n) = estimated cost to goal from n 
                    f(n) = estimated total cost through n to a goal 
        - A* search uses an admissible heuristic 
            h(n) <= h*(n) where h*(n) is the true cost from n 
    - Evaluation
        - Complete : Yes unless there are infinitely many nodes 
        - Time : Exponential in [relative error in h X length of solution]
        - Space : keeps all nodes in memory 
        - Optimal : Yes cannot expand f.sub(i+1) until f.sub(i) is finished
    - RBFS (recursive best-first search) and SMA* (Simplified memory-bounded A*)
    are robust, optimal search algorithm that use limited amounts of memory; given enough 
    they can solve problems A* can not solve because it runs out of memory

- Heuristic Functions // TO DO Read Form BOOK


